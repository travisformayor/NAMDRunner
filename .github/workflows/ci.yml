name: Windows Build Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'

jobs:
  # Windows build - Primary deployment target
  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: Cache Windows dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
          node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install frontend dependencies
      run: npm ci

    - name: Run basic linting checks
      run: |
        npm run lint
        npm run check

    - name: Check Rust formatting and linting
      run: |
        cd src-tauri
        cargo fmt --all -- --check
        cargo clippy -- -D warnings

    - name: Build Tauri Windows application
      run: npm run tauri build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Verify Windows build artifacts
      run: |
        echo "Checking for Windows build artifacts..."
        ls -la src-tauri/target/release/
        ls -la src-tauri/target/release/bundle/
      shell: bash

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-artifacts
        path: |
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/bundle/nsis/*.exe
        retention-days: 30

    - name: Create release summary
      run: |
        echo "## Windows Build Complete" >> $GITHUB_STEP_SUMMARY
        echo "- MSI installer created" >> $GITHUB_STEP_SUMMARY
        echo "- NSIS executable created" >> $GITHUB_STEP_SUMMARY
        echo "- Artifacts uploaded for download" >> $GITHUB_STEP_SUMMARY
      shell: bash